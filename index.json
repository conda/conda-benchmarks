{"project": "conda", "project_url": "https://github.com/conda/conda", "show_commit_url": "https://github.com/conda/conda/commit/", "hash_length": 8, "revision_to_hash": {"170": "128a6c9a0f772bf95287d3fe49c18befb35a3429", "204": "7319a5f27a7f0c9354d79f3fdd66a73fd5f31352", "208": "2c7ab2779dc3063422beb20568f0ac94fa9901ff", "416": "a0be726cb94cc64c430afd5508d75fe91f5f55ed", "418": "397491267621976d012086b788a51c25f176cae2", "427": "227f4699d1372b655ea1be30aa40c46dd42c5833", "437": "8a8ecf49765caad75f51e046cf0e720ee4341c83", "465": "f49c39990c63ce4738d640e8b03bd5a707ebb1df", "482": "ab151927db6c4e9c5ded5cbff91e2ba300c0b463", "609": "429e34b7d5d284f2097b12180c556682af8a584f", "640": "56d1199fb4828957bad769ee7a62835632fc12ec", "643": "63156ff6beab60bed7319484187c43bed18bb274", "645": "f69b28fa080e7cb83f2d211648d0c8378a1b68c8", "647": "b119490a786bdf737948e9dbd7bd15c1833f04e6", "650": "3aca5ec01cc0c31d18aef70486560021e8b254c0", "652": "375846f93165efa1f2111e71da39b24a6e38ad92", "677": "37282bb7b1ab36f41b3dbd00c15339ff819a3b5a", "708": "bbc3c1f598462e2c05c1b97121b53afbd2663aac", "717": "afc45461d1ea8bee96e99e736462854a279c7e7a", "935": "7ff4f34e84d6606ee60979ec16a87f5aee78c290", "955": "4c09d55c792105c940315a0315a5d7361d28e4f0", "995": "5e0ccae1571c4207f5029428a006582b838b22d2", "1160": "8bcde7630869c297818f7bf2e4a96aaacde581b6", "1202": "bc592ba8647257d767e55541f4d85b84eab36b04", "1210": "d8c409c5a34e2c0ab6d00732cc8b438e4a4a06dc", "1222": "734786c9074122aa825cec92bf2acb2e4bbe3691", "1248": "d664eacaac5a125d9b3aefa1568b7e93daa7973f", "1517": "dafba82cf07481852ea68947a665d51943b68fef", "1565": "262c540c08fedbf6b57bbca28ae1b9a256bdb24c", "1597": "cc8ea98430a6e6e2e85cebe4dcd6a0677a6c68dc", "1679": "f50a9b32ee002126189d2ba631b6893cb2423312", "1682": "6a17b9dd325a96d5042955dd0d148a3987dfe173", "1894": "85fdf08ed18243e6ab346b4b80d6c19cd7b8072f", "1910": "e967a7e9af7bf2ad7b2879a6e29017a729e0728f", "1937": "f1bacd1d4c3551414e51823284710a8fcf1cd7d3", "1950": "079648b0e93af2feda7c36e2074977a1f835e551", "1985": "bd8be5d60f85845bb81cc40940271c42a30db658", "2015": "08fdfed39eecf385fe94164af11e62c50aeddb66", "2053": "f5e91ca87e0b4d1b9600bfd49cc7760c2b83adb5", "2069": "cfb7022d6ca2ec178922a4f693cc69949939c326", "2089": "ce64c301450c9d2d26c1b68332a3be3d258dcc75", "2105": "b9801c34337fcb9cb035f52f9c5d7abd60e54e99", "2130": "546e3a79103875ce925caa88c96d703f140df23a", "2144": "e6b8f52547a598343e3fd9a9d389a5275c8ed9ea", "2176": "5436b6d6eb2154025e387dfa7f54f20e31a2de1b", "2185": "230d9aad55d5b94fd30ffe2ef63a98ca32bdfe62", "2200": "d9d8a4504c169e88869d8efe8260dcf81b85da23", "2324": "71486bd781876f5c42bea729f8289b3851993b2a", "2332": "d6ed6644c53f4a28ca52a85055b7f8e7dd821dc5", "2421": "0adfdd62521d76c2a4dc6e341646da0fc0af57e3", "2476": "5cb74c765150aefcaad52d0e85200e0e4c7ddae6", "2480": "dfbb746c5698119cc597baa71971bbd43dccac12", "2497": "ef764e70eef4bef045c9d7f9fc37bdfa0d7241ff", "2518": "ef7789c8c458212b26b1af4070b433d4c31598e6", "2530": "3ad4ee99a1e92755eeff967b67869b63cdddc86e", "2537": "af42356d4499c42fe94786abb14f5b0ed561b8d7", "2647": "ec4dad844d23c8a7ff55195e6a550e632ff39ea2", "2652": "5078233b8c605f98a40438ef4415983ac78920df", "2654": "5c03340300e1e041276e22961df6babbf4be12bf", "2664": "3764e46ec69a1cb2c3747ba1437ada739c293359", "2682": "7485af1f3266ccff53d2405c46d930b4e24708f2", "2735": "a5ee8d3ce9d9fcbc1d46455e797b56860e8a0330", "2751": "7603bcb0bf171adfc97a97554d4e6c7e2e83d19a", "2765": "a03dbf1f169048ed62be4f4e1f81c8d6e2f2ead6", "2826": "a06551d4c403c57f8a72021be1db3d4d137456df", "2848": "da99c7d4d55f2cf84c83a045dabb687229fb0916", "2920": "e0f5eefa6300c219bd132edc57cccc355217346f", "2962": "61f9f1dd3e9464b55843480175aa8d3ab4e6e2e4", "3006": "fb4b3e60ac395d6e70d02d8b1e071f708c1fe504", "3027": "9628addd8c32b4dcd795aae428a8a19dec7dc66e", "3031": "8902c5a6956192f64d1679fde7e42b0c4f7b223d", "3080": "dbc9a67263aa6f4c22bd1225ad51e9e3ca4e09f9", "3084": "e8bae7371de911b473b1eccba7e5813a573b39a0", "3087": "f08ff0c5a567f668b5c984c4a2b67f298a32676a", "3290": "2f7130e2d60207f4c529785f6e86c86bb9d64b20", "3316": "c15deba0916edf11e12d8d7d5e5dfb4cc58c1add", "3336": "e5145f966ea2ef96d292ba64ee38f64b810fc87b", "3395": "a87851147cba1ab7d11f6cc042be02641c242a61", "3405": "2a37fc3183ea083b920be4bada831e3914cfbe49", "3444": "d316260eb917243d31191fba56862cec9d063e56", "3472": "2fa30c38d6203e34c99f26a367f1c1c1058347c0", "3531": "8b6ef12ca79e26af500d69e5cdae50e9d148dd76", "3560": "b41930b01cc2349266af398a947776ce96face3a", "3719": "942b2a692065d47df4795e27886e2c6a36afe3ed", "3771": "239f58998fee92d7151df359f39012d687e44c40", "3773": "30fea71bf73ceaed392767f6b2a46cd19570e034", "3787": "ca6d1d4879743f31dd3384eba5b83f3f567a6cd6", "3789": "14b9ed3566d7754a0ef7bdf07a03afb82b158850", "3806": "4a00272295f228382f4c1687247958ba2b8d2db3", "3912": "445be90ca14686f470b0093224cd141bffe66650", "3933": "0656dae762c479571ee0cf839d723664270dd510", "3949": "afdede8a41998b777fa9238ec54b08a957c40a78", "3985": "11629c8c54795d8641697fe940a1fb6656fa451c", "4066": "7a99148504f47abcd167c55594a64fbe70868860", "4139": "450263b0eadccb1d8a8978b776bf7a48e2525eba", "4222": "91d4e0028c63a1a8b7bb68e60776dfc8a4b248f0", "4262": "a06f770e1afbd8735be68404dbb10abb0464154a", "4299": "5cdcdd3dfbddc9f774dafa1c0f2a90e9f7c1db59", "4387": "d9eb2d959a10100065c92fb597fe86e0a3c80a38", "4396": "260eb693fbc7e8eacdf7d09ca6c3fd1486a9cfa4", "4473": "c87f8e3acfddeaf1bf85d972a1dff1e873a0fbdd", "4549": "c1528e8ac3876f02301161dc3f79b304405ba303", "4639": "18af6e354bd1c180aac4fba06e2b68ab5e7042ac", "4641": "b55521e427ec76c92cb58d5d1b00bcec1206da43", "4678": "817a00f56befc0f90b136a871012b386662866af", "4708": "d984b1576ca0b73fbb2096bd073fb4145f308be4", "4778": "38f6217095cb1ba3e33f4af19d300474c94ed1b6", "4784": "f46c73c3cb6353a409449fdba08fdbd0856bdb35", "4809": "170ba162bfadbac49162a914aa900ba923e30a4b", "4815": "b568e23d4f99a675ef4b5221eb4527d5f1b9a79b", "4818": "77f433050208d31076243b2c84340278369c2ead", "4854": "82cc77de7e0545edf0e4c58f655c7191e4ad2e11", "4872": "9d28a9a8ec6b966ad5cb9c1e5806645eecac1405", "4904": "e94b3e7481b260bef2fb19fd33692341a6aba2c8", "5089": "a348f1280c76dbfb90e951d2910329e2f9a960fe", "5096": "3ef79312b9351a9a82f379039005e1c9091aca0c", "5209": "a0f00fb0f22b75edc7c1498ac016136a54dffe29", "5222": "622e0c9ca894e5bd04f31e7e7acb7c679e689799", "5235": "61a3bfcab97728ab4a3d98f4fa4d2b13d6cc5219", "5282": "b2b8c58dbd11d43ac71a4352bb4dfe6fb7dacc47", "5289": "53340eb076313552625adf7bebedf7b2f94e3f58", "5317": "436232fa6e32163ca74b6abc731f0d433f48e15e", "5548": "6a43adcf7d1ba2904a3d36e2a7461f879996336a", "5654": "62906d1fbe640266cc76fa349a8f40dfdba99827", "5685": "46263802584494b7187869c842699f7bb42e9433", "5814": "0eaee413c5862e99b68836e594903e0efac93dc4", "5836": "f4b8788c6a884becec2cd3a0d97c30fd70f71455", "5852": "192afe4deb7b8884d612c1d683e62354fcdeda2f", "5890": "5188cae33db220e5666cd0ace7507602f35e5905", "5982": "4ac78f1c2c19e08b07579b6fd48f17da259551bf", "6050": "beeade8dffaf40ff8427167bc816d5fb19d0a422", "6071": "1971dafc2ae1e5d741e4e47e74284b763b8f67a7", "6080": "0bf3f80f83f27606c3d7551678a29fd847327045", "6141": "65cd26a8977db6d3c2191831cd7ba8e8e16148c7", "6211": "f6752339294f4b6ff4c04c22d5abf9fc8980d284", "6236": "ed9fd54f1db9aa55a843b4d3aeb0dfe0e0ca2ef9", "6281": "8ae156c674db2a0dcc285a7348ce0372986c1446", "6419": "6c2b947bdb9af77db334a7f46774164897536b3f", "6434": "34a8bb600adb021ba067d2d057f3f054d4be2292", "6491": "21c26e487dee9567467c18761fc7bffa511a97bd", "6549": "aabc8452c32ce67c6cfd0b6ac11f9cfe86e47249", "6583": "a11254ed0712e7ed6dc816e784672ddac0644bc6", "6710": "9c1d32a88120fe8b0adb92dbffcd02736262ee32", "6753": "17e0e2296f18c0bf3ec794959b9daa3f2ed07534", "6850": "20e6122508e98f63b2cde8d03c58599d66f3f111", "6997": "f9442f3ae5597338a98e36b73acbbcda80b1dd06", "6999": "2dd399d86344c8cb8a2fae41f991f8585e73ec9f", "7036": "1e6a9a2fc947dc4f80230d8deff6732124f78aa4", "7076": "5980241daa95ec60af005ad1764bbadfa1d244a3", "7133": "4f96dbd1d29ad9b9476be67217f63edd066b26b0", "7149": "99bae0489c3724287658d8605e766f32b9d898d0", "7325": "5fa57f3d21999be9b26d41121eaafa0743202d4d", "7431": "99d35e23db597e4f34af0676b0166ab68a76ccf6", "7536": "89fc9cc392a268007f773b4911d18235ec47c988", "7714": "40ddce3881fccf2f712443864dff6be042b46213", "8071": "aecafc55b3d6fe5c5410a8d256a57a234a46b141", "8140": "dddcb3d5285f850d047a0a35da27142336bd3371", "8284": "c5d39058e064c4125661a03ff8c0c45ebf9c85fa", "8305": "eff1da62f3ba4cbe476b221b6b2ac55a3539d84f", "8366": "febffecb4c30a9a13918c44afee4bc9244f944c1", "8367": "2adda2cc3f7ec2ce5a5e18eecbc31dbc7bd1dfab", "8427": "795fe15928096281548756069a7a1cacf7970a1b", "8466": "832f87e01a6842f0d4d7ea381bf2f8e3a932d919", "8489": "459f08907f971f3763e16d1f0368e01cc56e5a7e", "8511": "cd746a88e393595e1b3982318fe6ed29e8861502", "8515": "d3eb388303a64a25ac88febd0655bb6b43999b55", "8527": "97e719c3f5dd3c436a3fbe2b24d036e57f9d7b37", "8612": "9f54a47c0b5fed27b520410daba29f4f7e1fcd95", "8688": "7f166a408c45c3bf295e4e2d293a53ea42a04e3f", "8699": "add97c98920c25f56ad551da39dc5500fe0c2e4b", "8767": "9501f4fde15aad95c7905331a1c48e650ff9824a", "8880": "5380bffa448e363b1bddbe28f98cf8c7ce0b6157", "9030": "0c4f1379218e2a81238c00633ab7de65174d41fd", "9083": "30c6216849bdab94a88274b05bd8b6ec71911b5f", "9147": "19b5182e4bbd587a241e6177470290b4fd804aac", "9473": "a937a21da10c85aa8f27e1293698a96350231783", "9494": "8ce1f2edd30a1655fbbafb2b49fe3c46491c3cc8", "9747": "d46ee3535f8049f1f9408bb48246a9f741e58fb0", "9874": "99f5bff861d7c89419a87967aac22e415bf85581", "9955": "9f422cc4b6fcca2ebfd04c30a14878fc909a4144", "9999": "c8541f5a1fa871e8582c6476e40156bd6ac995b9", "10192": "cb134f324394dcfc1fed116f4ea1b0c578670d9a", "10458": "dce9978e3a226ab407e89f12e693350db4a5fe4f", "10474": "697cb3b3ac77331c0a17600c9fc44cab75b6f234", "10479": "c60a7ab0540fa0ce3856c76c4f00a2fa15343c3a", "10534": "be6ce15e42b9c714e9b15b2de47480dc9dd5ab2e", "10578": "d3b47d7b9ee483ba894a385e99361fa13ca9444b", "10651": "f0032e064a8122ebdb4a0d7885a0b61a053e58f5", "10655": "86849b8d71f1b85ae1f4429fafd13b944f23f9e4", "10705": "8d5b26c24128ac88a725cd275250aa379f58eff0", "10713": "98c3549429009de3c51cffc5e25753dfe83a7417", "10720": "37549c41a1925b0625e346e2823a5e15af03b862", "10898": "d75d6a6a89049fb71d13b8eb0d719c0cf0937f3b", "10945": "eba59e3d6ba486b6e9a39864b1daacbc7f99f719", "10953": "09912b87b21b0a66d638e65561ed126677846a91", "10967": "6c5d2bab095f9a2a4f846515800dbcf38f2fac39", "10986": "2060458e0c546a3c70fa041e738cb73b41c4b0d3", "11010": "fbf3c0dac0667293d8926031119fb0798344d848", "11042": "0f3a83b1fd068c75e530ddece96e98cc5b5e6d8e", "11053": "a4c4feae404b2b378e106bd25f62cc8be15c768f", "11090": "ee888e9d6a7c76c7dd431956dbb522e1088e4b44", "11104": "ad07eba8949e998728c8041af4fc76c34f6bb9ee", "11170": "01cec212c8ec28274cf464c61380e72bc70dc3d0", "11209": "33731c68637acb2b5cac46f122b50add46c10490", "11240": "fcc29968afaafe343ba30e68da245c44516e69f0", "11256": "b65743878d9d368dc45dc0089a651e72adb10274", "11258": "9d9cc69ad10b6df25b63062cbd30f4be92cadf35", "11363": "1f64e5fb10d2cd1d632bda38ea3162fcdbb4f14c", "11435": "0734fdf12f112b5a2a1ced81526715a08ef29519", "11544": "33a02f4f54bc8ceca58505f273760e8f4f38b194", "11662": "d5bec21d1f64c3bc66c2999cfc690681e9c46177", "11748": "32ebb8a4de3073fb008d0d785fb0712d0d612c54", "11764": "c467517ca652371ebc4224f0d49315b7ec225108", "11804": "1d9232d1222c863a421a640c1e1d15f398911e90", "11816": "f3f2fa0eb7a5bcd90a34ea8f06bd546939c0e970", "11961": "f57432f32151b484656fe66197bfba937043c7f9", "12858": "d7aa8489cf7a73d0a8e9386093f50529c59bc88f", "12890": "df615ac68081ab2b9ec309ab9bf3a3cf105ef8fd", "12894": "f7691f0f041a8822b2d7e9721155d88c586305c9", "12937": "75ef1f3e250b1d8ac33c4e9a72fee69b29786fd0", "13019": "c411642c06795aa144d81b24876fb20547fa6f86", "13053": "eebc9ac09ffe3b0ee6b680cd2d294e02edea02a3", "13156": "21a24f02b2687d0895de04664a4ec23ccc75c33a", "13252": "1471f043eed980d62f46944e223f0add6a9a790b", "13364": "fd980b07a0e4b745acc691cb49d39e60372d9cc7", "13376": "64bde065f8343276f168d2034201115dff7c5753", "13399": "a0caa280438636ac7286b85012e8903dccfad73b", "13418": "6461a1abe4c255424104913ab6d089c9453cba4e", "13459": "752b55bc18c68df443273142141e594a8e89e46d", "13464": "8eeb1bba428cceb56c6dae120c51e35b3332b854", "13514": "e848a48fc8f1a98011bc2202586e656faa3aa786", "13549": "7b4538da06dad8817801ff19b109b98a23731fea", "13567": "128404e97cff752f2776dda2e3d2a85c0c1ea510", "13572": "bac8dff378e1d4c8d42abdc533e921832a430b3c", "13597": "8a6862df7a1354523749117e11aa037bef2c9fb1", "13662": "c7f388c917404b10e4fe4e16df0063465ee2ea61", "14093": "9a303dcb394fe4e2a76cd97dd379ebc9df7e8679", "14129": "35ce4ba8e433ddfac88a523f8dcf4fa7f409aa08", "14137": "7bcb0efd3da4597ba243547824155e94aa87a153", "14217": "6c438959bb911b779c20c77733b0b564b719b8e1", "14270": "38d07e0a2dcfbe4c883af0f246431e1e073fa904", "14283": "f38d1f749e3400e73ecd44eaf6ff6765626fdc25", "14502": "6cfaeb48919b34de1c20498ccf340d8fbfc29505", "14612": "f2271ef2f87aec57398c574c8e0c43693d5e883b", "14663": "e11e87a2cc7ec644e8248429ad9ed32a2370b4e1", "14688": "8e193818519f7f64ec9d8eb03ddea04946333158", "14736": "4b2683e4e648989e58ec059bcbba772afb3e849d", "14756": "4e2444d202fa194285e3d536c107aeb7da837048", "14884": "296a67dd74c1c6c78058c1b94d6aeec33691fe3b", "14908": "3ca57b16effb02f961631305fcd941d96cd856eb", "14958": "5287a39eb057774edbc4d7cb4feb259ec70a5868", "14969": "e17299c746f10f83c306c100177f592bca4d1648", "14984": "8734dfeb875f5602440efcf3fb98bda27b3d59a4", "15126": "1d0e23ed17a8f050051ae911b21f4ef22f8c6277", "15342": "37f7ffb4821f52cd4b79da1e475e1fdf4d548de5", "15653": "ddf5c3d6409b9417940f6e93c023ecff59ab8a4b", "15867": "57566726ada0e6fe626f8af47fbf446487067483", "15975": "a01da5adddd036ecec3672beacde30db609df413", "16034": "f4d8ae9f4577008deddf4eb8be52e0abbacf475a", "16308": "42a06816356a905cce90564ea4663e2787832467", "16392": "7d03fed4ed76729f6a7407395ed1f5721b3c0c45", "16460": "56bf24b261fe9c443beec802afe98c1a192154fb", "16481": "a9f5f25d92d58d41c088e4513610b9c33ea3a683", "16496": "e8b778e3b7ae2112a3574db955ea0035beae1168", "16589": "296be7e9e1d38883fb1e46237fe55352016978c1", "16601": "df7655a9ab4cc77c68e21864cf4e749b18300814", "16643": "729e8b2ccb1031dc1f1e5384ff0806b20b6d6fa7", "16644": "248741a843e8ce9283fa94e6e4ec9c2fafeb76fd", "17165": "cf1456d85ec738c6a54360a0e811c24b8f117e88", "17403": "fc81d4217f6c1804e983d1698f8b7cc5bc01874c", "17579": "e126a09d326d33e440835cf8e2389c3efa96fffa", "17783": "20ea9d5a7a658ab95acd2abcd5b7484f11686110", "17951": "60e11b4f1859874c1cb1a3ae324e599e0867a086", "18658": "2abc88b82e6888e16c4f15755235dea1b4ebbad4", "18660": "0ad602b1e5991fdc314406aafb36c2c7a371ee13"}, "revision_to_date": {"170": 1352835467000, "204": 1353517235000, "208": 1353528751000, "416": 1358809627000, "418": 1358894555000, "427": 1358970036000, "437": 1358983883000, "465": 1359497048000, "482": 1360093056000, "609": 1362508850000, "640": 1362704356000, "643": 1362782826000, "645": 1362852786000, "647": 1362868152000, "650": 1363037881000, "652": 1363113607000, "677": 1363968117000, "708": 1366401488000, "717": 1367270434000, "935": 1369933889000, "955": 1370014908000, "995": 1370443679000, "1160": 1371159974000, "1202": 1371747733000, "1210": 1371769525000, "1222": 1371839539000, "1248": 1372781965000, "1517": 1375303266000, "1565": 1375893515000, "1597": 1376683610000, "1679": 1378428424000, "1682": 1378486335000, "1894": 1380654760000, "1910": 1382565987000, "1937": 1382901552000, "1950": 1382993774000, "1985": 1383585005000, "2015": 1383852804000, "2053": 1384444192000, "2069": 1384549115000, "2089": 1385578489000, "2105": 1386113017000, "2130": 1386691709000, "2144": 1387290298000, "2176": 1388527662000, "2185": 1388705839000, "2200": 1389031854000, "2324": 1389912350000, "2332": 1389984093000, "2421": 1390593221000, "2476": 1391208466000, "2480": 1391467991000, "2497": 1391712290000, "2518": 1392399145000, "2530": 1392672499000, "2537": 1392918869000, "2647": 1394209608000, "2652": 1394213712000, "2654": 1394216823000, "2664": 1394564332000, "2682": 1394647999000, "2735": 1395166547000, "2751": 1395268794000, "2765": 1395700366000, "2826": 1396471315000, "2848": 1396896974000, "2920": 1398119217000, "2962": 1399317136000, "3006": 1400192715000, "3027": 1401138824000, "3031": 1401215514000, "3080": 1402346932000, "3084": 1402414827000, "3087": 1402437916000, "3290": 1407779764000, "3316": 1407963169000, "3336": 1408569037000, "3395": 1409858793000, "3405": 1410211849000, "3444": 1411152360000, "3472": 1412716651000, "3531": 1414769345000, "3560": 1415220398000, "3719": 1418933313000, "3771": 1421966465000, "3773": 1422039742000, "3787": 1422385378000, "3789": 1422465914000, "3806": 1423004904000, "3912": 1424125729000, "3933": 1424812251000, "3949": 1426180196000, "3985": 1428336297000, "4066": 1429732787000, "4139": 1430845979000, "4222": 1433439977000, "4262": 1434484317000, "4299": 1435595656000, "4387": 1437601506000, "4396": 1437678754000, "4473": 1439227797000, "4549": 1441998711000, "4639": 1443472602000, "4641": 1443476401000, "4678": 1444683084000, "4708": 1444946594000, "4778": 1447111999000, "4784": 1447265811000, "4809": 1447965797000, "4815": 1449076830000, "4818": 1449160144000, "4854": 1449775597000, "4872": 1450380834000, "4904": 1454363225000, "5089": 1455908683000, "5096": 1455913858000, "5209": 1457131094000, "5222": 1457379865000, "5235": 1457476727000, "5282": 1457641118000, "5289": 1457647978000, "5317": 1458157713000, "5548": 1462992238000, "5654": 1464278593000, "5685": 1464990064000, "5814": 1465913063000, "5836": 1466028235000, "5852": 1466054886000, "5890": 1466181472000, "5982": 1466712373000, "6050": 1467048383000, "6071": 1467214413000, "6080": 1467228671000, "6141": 1467395489000, "6211": 1467905543000, "6236": 1468101702000, "6281": 1468354087000, "6419": 1469031573000, "6434": 1469228003000, "6491": 1469549214000, "6549": 1469727512000, "6583": 1470069870000, "6710": 1470777216000, "6753": 1470884347000, "6850": 1471546365000, "6997": 1473354271000, "6999": 1473354508000, "7036": 1473876638000, "7076": 1474038374000, "7133": 1474924620000, "7149": 1475003564000, "7325": 1476815246000, "7431": 1477240757000, "7536": 1478109700000, "7714": 1479800203000, "8071": 1481739557000, "8140": 1482160536000, "8284": 1483743621000, "8305": 1483778887000, "8366": 1484080573000, "8367": 1484080654000, "8427": 1484327338000, "8466": 1484665075000, "8489": 1484780301000, "8511": 1484939964000, "8515": 1484943854000, "8527": 1485186444000, "8612": 1485900272000, "8688": 1486472799000, "8699": 1486679962000, "8767": 1487110272000, "8880": 1487352508000, "9030": 1488557975000, "9083": 1490029257000, "9147": 1490878966000, "9473": 1493054833000, "9494": 1493130398000, "9747": 1494359672000, "9874": 1495136650000, "9955": 1495554318000, "9999": 1495731166000, "10192": 1497284174000, "10458": 1500657093000, "10474": 1501148647000, "10479": 1501532931000, "10534": 1502476422000, "10578": 1502915158000, "10651": 1505501864000, "10655": 1505762293000, "10705": 1507309643000, "10713": 1507579892000, "10720": 1508264919000, "10898": 1513387889000, "10945": 1513800029000, "10953": 1513894588000, "10967": 1513926984000, "10986": 1513980655000, "11010": 1514155042000, "11042": 1514576767000, "11053": 1514747146000, "11090": 1515435157000, "11104": 1515642176000, "11170": 1516805764000, "11209": 1516926029000, "11240": 1517949360000, "11256": 1518209113000, "11258": 1518211431000, "11363": 1519384697000, "11435": 1519854548000, "11544": 1523600530000, "11662": 1524234390000, "11748": 1524847331000, "11764": 1525194189000, "11804": 1525713352000, "11816": 1526300728000, "11961": 1530272334000, "12858": 1530919872000, "12890": 1531175460000, "12894": 1531232911000, "12937": 1532967112000, "13019": 1534178970000, "13053": 1534865189000, "13156": 1536343360000, "13252": 1540263410000, "13364": 1544485171000, "13376": 1546285166000, "13399": 1547577879000, "13418": 1548128440000, "13459": 1548805925000, "13464": 1548813261000, "13514": 1549584459000, "13549": 1550086729000, "13567": 1550259597000, "13572": 1550499731000, "13597": 1550799917000, "13662": 1551929624000, "14093": 1553909629000, "14129": 1554235425000, "14137": 1554392959000, "14217": 1554919657000, "14270": 1555467834000, "14283": 1555532467000, "14502": 1558112928000, "14612": 1559270240000, "14663": 1560216335000, "14688": 1560524199000, "14736": 1560977291000, "14756": 1561405076000, "14884": 1562885710000, "14908": 1562976530000, "14958": 1563398145000, "14969": 1563475851000, "14984": 1563564921000, "15126": 1565119435000, "15342": 1568309868000, "15653": 1572888649000, "15867": 1576796455000, "15975": 1579891661000, "16034": 1584116445000, "16308": 1596747772000, "16392": 1600099469000, "16460": 1602693662000, "16481": 1603737926000, "16496": 1605059676000, "16589": 1617141797000, "16601": 1618418419000, "16643": 1624659441000, "16644": 1625020251000, "17165": 1637598180000, "17403": 1646749439000, "17579": 1652979383000, "17783": 1659560436000, "17951": 1663666814000, "18658": 1669803937000, "18660": 1669990688000}, "params": {"arch": ["arm64"], "cpu": ["Apple M1 Pro"], "machine": ["Daniels-MBP.monotreme.club"], "num_cpu": ["10"], "os": ["Darwin 21.6.0"], "ram": ["17179869184"], "python": ["3.10"], "conda-package-handling": ["2.0.2"], "conda-libmamba-solver": ["", null], "branch": ["main"]}, "graph_param_list": [{"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "Daniels-MBP.monotreme.club", "num_cpu": "10", "os": "Darwin 21.6.0", "ram": "17179869184", "python": "3.10", "conda-package-handling": "2.0.2", "conda-libmamba-solver": "", "branch": "main"}, {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "Daniels-MBP.monotreme.club", "num_cpu": "10", "os": "Darwin 21.6.0", "ram": "17179869184", "python": "3.10", "conda-package-handling": "2.0.2", "branch": "main", "conda-libmamba-solver": null}], "benchmarks": {"conda_install.TimeInstall.time_explicit_install": {"code": "class TimeInstall:\n    def time_explicit_install(self, threads, latency, download_only=True):\n        socket = self.socket\n        prefix = os.path.join(self.td.name, f\"ex-{threads}-{latency}\")\n        port = socket.getsockname()[1]\n        requests.get(f\"http://127.0.0.1:{port}/latency/{latency}\")\n        specs = [\n            re.sub(\"(.*)(/.*/.*)\", f\"http://127.0.0.1:{port}\\\\2\", spec)\n            for spec in SPECS\n        ]\n        log.debug(\"%s\", specs)\n        os.environ[\"CONDA_PKGS_DIRS\"] = prefix\n        os.environ[\"CONDA_FETCH_THREADS\"] = str(threads)\n        reset_context()\n        print(f\"threads={threads}\")\n        if hasattr(context, \"fetch_threads\"):\n            assert context.fetch_threads == threads\n        conda.core.package_cache_data.DOWNLOAD_THREADS = threads\n        context.download_only = download_only\n        context.debug = 1\n        try:\n            conda.misc.explicit(\n                specs,\n                prefix,\n                verbose=False,\n                force_extract=True,\n                index_args=None,\n                index=None,\n            )\n        except conda.CondaExitZero:\n            log.info(\"cache prepared (not an error)\")\n\n    def setup(self, threads, latency, server=True):\n        self.td = tempfile.TemporaryDirectory()\n        if server:\n            self.socket = run_on_random_port()", "min_run_count": 2, "name": "conda_install.TimeInstall.time_explicit_install", "number": 0, "param_names": ["threads", "latency"], "params": [["1", "2", "3", "5", "7"], ["0.0", "0.25"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4de805fe8eda4b1904cf90edf9b73e5941ba1b0913a6994161ebc05ca41245fb", "warmup_time": -1}, "download_asyncio.TimeDownloadPackages.time_download_strategy": {"code": "class TimeDownloadPackages:\n    def time_download_strategy(self, latency, strategy):\n        return {\n            \"aiohttp\": self.download_aiohttp,\n            \"threads\": self.download_threads,\n            \"serial\": self.download_serial,\n        }[strategy](latency)\n\n    def setup(self, latency=0.0, strategy=None):\n        self.tempdir = TemporaryDirectory(\"aiohttp\")\n        self.temppath = Path(self.tempdir.name)\n        log.info(\"Download to %s\", self.tempdir)\n        self._port = test_server.run_on_random_port().getsockname()[1]\n        requests.get(f\"http://127.0.0.1:{self.port}/latency/{latency}\")\n\n    def setup_cache(self):\n        \"\"\"\n        Called once per session.\n        self.value = x doesn't work here; benchmarks run in separate processes.\n        \"\"\"\n        test_server.base.mkdir(parents=True, exist_ok=True)\n    \n        for package in add_bz2(cheap[\"package\"]):\n            name = package[\"url\"].rpartition(\"/\")[-1]\n            if not (test_server.base / name).exists():\n                conda.exports.download(package[\"url\"], test_server.base / name)", "min_run_count": 2, "name": "download_asyncio.TimeDownloadPackages.time_download_strategy", "number": 0, "param_names": ["latency", "strategy"], "params": [["0.0", "0.01"], ["'serial'", "'threads'", "'aiohttp'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "download_asyncio:125", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed437b590860e256074185f0b903e5a51f75f2efcb95233b7c3c4a8c758615a5", "warmup_time": -1}, "extract.TimeExtract.time_extract": {"code": "class TimeExtract:\n    def time_extract(self, threads, format, lang):\n        if lang == \"rust\" and unpack_conda is None:\n            raise NotImplementedError()\n        if lang == \"rust\" and format == \".tar.bz2\":\n            raise NotImplementedError()\n        extract_fn = {\n            \"rust\": u2,\n            \"py\": conda_package_streaming.extract.extract,\n        }[lang]\n    \n        with ThreadPoolExecutor(threads) as executor:\n            for package in self.packages:\n                stem = package.name[: -len(format)]\n                dest_dir = pathlib.Path(self.td.name, stem)\n                print(package, str(dest_dir))\n                executor.submit(extract_fn, package, dest_dir)\n\n    def setup(self, threads, format, lang):\n        if lang == \"rust\" and format == \".tar.bz2\":\n            raise NotImplementedError()\n        self.td = TemporaryDirectory()\n    \n        # could use list from `conda-lock` in case more packages are in base\n        self.packages = list(base.glob(f\"*{format}\"))\n        if len(self.packages) < MINIMUM_PACKAGES:\n            raise NotImplementedError(f\"Not enough packages in {base}\")", "min_run_count": 2, "name": "extract.TimeExtract.time_extract", "number": 0, "param_names": ["threads", "format", "lang"], "params": [["1", "2", "3", "5", "7"], ["'.conda'", "'.tar.bz2'"], ["'py'", "'rust'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0eb046ec5865369b3e52246499edd774a6b94937dc8a306240dd80eedb3a9e94", "warmup_time": -1}, "extract.TrackSuite.track_streaming_versus_handling": {"code": "class TrackSuite:\n    def track_streaming_versus_handling(self):\n        \"\"\"\n        Compare conda-package-streaming time versus conda-package-handling (should be a number > 1)\n        \"\"\"\n        attempted = len(self.condas)\n        with TemporaryDirectory(\n            \"conda-package-streaming\"\n        ) as streaming, TemporaryDirectory(\"conda-package-handling\") as handling:\n    \n            # give faster streaming the cache disadvantage\n            begin = time.monotonic()\n            # revise self.condas down to the number extracted in no more than\u0153\n            # MAXIMUM_SECONDS\n            self.condas = extract_streaming(streaming, self.condas)\n            end = time.monotonic()\n            cps_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'streaming' extracted {actual} out of {attempted} .conda's\")\n    \n            begin = time.monotonic()\n            self.condas = extract_handling(\n                handling, self.condas, time_limit=cps_time * 4\n            )\n            end = time.monotonic()\n            handling_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'handling' extracted {actual} out of {attempted} .conda's\")\n    \n            return handling_time / cps_time\n\n    def setup(self):\n        self.condas = list(base.glob(\"*.conda\"))\n        if len(self.condas) < MINIMUM_PACKAGES:\n            raise NotImplementedError(\"Not enough .conda packages in ~/miniconda3/pkgs\")\n    \n        self.tarbz2 = list(base.glob(\"*.tar.bz2\"))", "name": "extract.TrackSuite.track_streaming_versus_handling", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "speedup", "version": "d384feaa4082383c1f3872b820824ebbdbecd2d47ed818f8ff9623741d3f9199"}, "extract.TrackSuite.track_streaming_versus_handling_tarbz2": {"code": "class TrackSuite:\n    def track_streaming_versus_handling_tarbz2(self):\n        \"\"\"\n        Compare conda-package-streaming time versus conda-package-handling (should be a number > 1)\n        \"\"\"\n        attempted = len(self.condas)\n        with TemporaryDirectory(\n            \"conda-package-streaming-bz2\"\n        ) as streaming, TemporaryDirectory(\"conda-package-handling-bz2\") as handling:\n    \n            # give faster streaming the cache disadvantage\n            begin = time.monotonic()\n            # revise self.condas down to the number extracted in no more than\u0153\n            # MAXIMUM_SECONDS\n            self.tarbz2 = extract_streaming(streaming, self.tarbz2)\n            end = time.monotonic()\n            cps_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'streaming' extracted {actual} out of {attempted} .tar.bz2's\")\n    \n            begin = time.monotonic()\n            self.tarbz2 = extract_handling(\n                handling, self.tarbz2, time_limit=cps_time * 4\n            )\n            end = time.monotonic()\n            handling_time = end - begin\n    \n            actual = len(self.condas)\n            print(f\"'handling' extracted {actual} out of {attempted} .tar.bz2's\")\n    \n            return handling_time / cps_time\n\n    def setup(self):\n        self.condas = list(base.glob(\"*.conda\"))\n        if len(self.condas) < MINIMUM_PACKAGES:\n            raise NotImplementedError(\"Not enough .conda packages in ~/miniconda3/pkgs\")\n    \n        self.tarbz2 = list(base.glob(\"*.tar.bz2\"))", "name": "extract.TrackSuite.track_streaming_versus_handling_tarbz2", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "speedup", "version": "cfb4bf5f3f7e90f04ebbf6294ea5132bc26bf5fbe56d6f3f56141cd92ec64442"}, "peakmem_create_numpy_mkl": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_numpy_mkl(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"numpy=1.15.2\",\n        ]\n    )", "name": "peakmem_create_numpy_mkl", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "214b718cc302a6162bdf822a2d1f22f4c2b62b249066c260f07437ac1d8f9457"}, "peakmem_create_numpy_openblas": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_numpy_openblas(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"numpy=1.15.2\",\n            \"nomkl\",\n        ]\n    )", "name": "peakmem_create_numpy_openblas", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a99b523ded0d6cd8c638a685693152bbce69cdd89e51b2e90e1fc4ccbbcd75f1"}, "peakmem_create_python": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_python(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n        ]\n    )", "name": "peakmem_create_python", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "61700a79a1c9bbe7420938c2225ee3cbaa150591940f872fca749379430f01d5"}, "peakmem_create_python_boost": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_python_boost(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"libboost\",\n        ]\n    )", "name": "peakmem_create_python_boost", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "655976de94b89433baaecbc7cc0dd3e1a08dce4d4eb8d0fc442baabd4bbe99c0"}, "peakmem_solve_anaconda_53": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_anaconda_53(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS + [f\"--solver={solver}\", \"-c\", main, \"anaconda=5.3.0\"]\n    )", "name": "peakmem_solve_anaconda_53", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "5b8600e818025cd7cd6518748d577d02d4f727c5496a24ac158481afbbd64e61"}, "peakmem_solve_r_essentials_r_base_conda_forge": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_r_essentials_r_base_conda_forge(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-c\",\n            conda_forge,\n            \"-c\",\n            main,\n            \"-c\",\n            r,\n            \"r-essentials\",\n            \"r-base\",\n        ]\n    )", "name": "peakmem_solve_r_essentials_r_base_conda_forge", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "fcd8c26e72943f67b60d7dec8d356d3f842adfc9ffd9754bd59786c411884ec5"}, "peakmem_solve_r_essentials_r_base_defaults": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_r_essentials_r_base_defaults(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS\n        + [f\"--solver={solver}\", \"-c\", main, \"-c\", r, \"r-essentials\", \"r-base\"]\n    )", "name": "peakmem_solve_r_essentials_r_base_defaults", "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "52c926f78bde8798cdea3e9100d80378fc17b3a3f60e8dd96758e63b97abfcfe"}, "run_versus_activate.time_conda_run": {"code": "def time_conda_run():\n    \"\"\"\n    May need to be string form of benchmark to catch import times?\n    \"\"\"\n    from conda.testing.helpers import run_inprocess_conda_command\n\n    run_inprocess_conda_command(\n        \"conda run -n base python -V\",\n        disallow_stderr=False,\n    )", "min_run_count": 2, "name": "run_versus_activate.time_conda_run", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce014c648a566030aac63b393c16c9333f0b90cbf380a3b537e552e501941096", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_load_json": {"code": "class TimeSubdirData:\n    def time_load_json(self):\n        os.environ[\"CONDA_PKGS_DIRS\"] = str(CONDA_PKGS_DIR)\n        os.environ[\"CONDA_DEFAULT_THREADS\"] = \"1\"\n        SubdirData.clear_cached_local_channel_data()\n        reset_context()\n        context.offline = True\n        channel = Channel(CHANNEL_URL)\n        subdir = SubdirDataNoPickle(channel)\n        subdir._read_local_repdata(MOD_STAMP[\"_etag\"], MOD_STAMP[\"_mod\"])\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_load_json", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "35f66376e8016a26a66a7984f7d6f7028ad2359ab1f18287fb448fe4156087a2", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_load_json_query_all": {"code": "class TimeSubdirData:\n    def time_load_json_query_all(self):\n        os.environ[\"CONDA_PKGS_DIRS\"] = str(CONDA_PKGS_DIR)\n        os.environ[\"CONDA_DEFAULT_THREADS\"] = \"1\"\n        SubdirData.clear_cached_local_channel_data()\n        reset_context()\n        context.offline = True\n        channel = Channel(CHANNEL_URL)\n        subdir = SubdirDataNoPickle(channel)\n        subdir._read_local_repdata(MOD_STAMP[\"_etag\"], MOD_STAMP[\"_mod\"])\n        subdir.query(\"[version=1.0]\")\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_load_json_query_all", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "154d0d31b099aeecd22b30343f902ab794ab9b232afd6f40368db1dc6eb4c352", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_load_json_query_one": {"code": "class TimeSubdirData:\n    def time_load_json_query_one(self):\n        os.environ[\"CONDA_PKGS_DIRS\"] = str(CONDA_PKGS_DIR)\n        os.environ[\"CONDA_DEFAULT_THREADS\"] = \"1\"\n        SubdirData.clear_cached_local_channel_data()\n        reset_context()\n        context.offline = True\n        channel = Channel(CHANNEL_URL)\n        subdir = SubdirDataNoPickle(channel)\n        subdir._read_local_repdata(MOD_STAMP[\"_etag\"], MOD_STAMP[\"_mod\"])\n        subdir.query(\"python\")\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_load_json_query_one", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63b2f23eb52638a33eb7db04b302cabf427550fdb374166978b6514cf9f99351", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_load_pickle": {"code": "class TimeSubdirData:\n    def time_load_pickle(self):\n        os.environ[\"CONDA_PKGS_DIRS\"] = str(CONDA_PKGS_DIR)\n        os.environ[\"CONDA_DEFAULT_THREADS\"] = \"1\"\n        SubdirData.clear_cached_local_channel_data()\n        reset_context()\n        context.offline = True\n        channel = Channel(CHANNEL_URL)\n        sd = SubdirData(channel)\n        sd._read_pickled(MOD_STAMP[\"_etag\"], MOD_STAMP[\"_mod\"])\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_load_pickle", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bf8d3ae4aa83e4494d54ba756a12997cb22c0b68ff8a89b70ab2cef8604f66af", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_save_pickle": {"code": "class TimeSubdirData:\n    def time_save_pickle(self):\n        os.environ[\"CONDA_PKGS_DIRS\"] = str(CONDA_PKGS_DIR)\n        os.environ[\"CONDA_DEFAULT_THREADS\"] = \"1\"\n        SubdirData.clear_cached_local_channel_data()\n        reset_context()\n        context.offline = True\n        channel = Channel(CHANNEL_URL)\n        sd = SubdirData(channel)\n        sd._pickle_me()\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_save_pickle", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6fc984f0a7d013480570252a7f2988e0b756fcf4ff76696d79414cbe5995497a", "warmup_time": -1}, "subdir_data.TimeSubdirData.time_subdir_data": {"code": "class TimeSubdirData:\n    def time_subdir_data(self):\n        channel = Channel(f\"file://{base}\", platform=\"osx-64\")\n        SubdirData.clear_cached_local_channel_data()\n    \n        sd_a = SubdirData(channel)\n        assert sd_a.query_all(\"zlib =1.2.11\")\n\n    def setup(self):\n        if not REPODATA_FILENAME.exists():\n            REPODATA_FILENAME.parent.mkdir(exist_ok=True)\n            # fake out\n            (base / \"noarch\").mkdir(exist_ok=True)\n            (base / \"noarch\" / \"repodata.json\").write_text(\"{}\")\n            (base / \"noarch\" / \"repodata.json.bz2\").write_text(\"\")\n            # do we have a frozen large-ish repodata.json or can we fake one?\n            conda.exports.download(\n                \"https://repo.anaconda.com/pkgs/main/osx-64/repodata.json\",\n                REPODATA_FILENAME,\n            )", "min_run_count": 2, "name": "subdir_data.TimeSubdirData.time_subdir_data", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7b06ce8f4c53edf9bb515f7f095b3fd5b6bfc9a2170e059bc8b38b3d28d67021", "warmup_time": -1}, "time_create_numpy_mkl": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_numpy_mkl(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"numpy=1.15.2\",\n        ]\n    )", "min_run_count": 2, "name": "time_create_numpy_mkl", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "214b718cc302a6162bdf822a2d1f22f4c2b62b249066c260f07437ac1d8f9457", "warmup_time": -1}, "time_create_numpy_openblas": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_numpy_openblas(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"numpy=1.15.2\",\n            \"nomkl\",\n        ]\n    )", "min_run_count": 2, "name": "time_create_numpy_openblas", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a99b523ded0d6cd8c638a685693152bbce69cdd89e51b2e90e1fc4ccbbcd75f1", "warmup_time": -1}, "time_create_python": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_python(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n        ]\n    )", "min_run_count": 2, "name": "time_create_python", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61700a79a1c9bbe7420938c2225ee3cbaa150591940f872fca749379430f01d5", "warmup_time": -1}, "time_create_python_boost": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_create_python_boost(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        CREATE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-y\",\n            \"-n\",\n            random_env_name(),\n            \"-c\",\n            main,\n            \"python=3.6\",\n            \"libboost\",\n        ]\n    )", "min_run_count": 2, "name": "time_create_python_boost", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "655976de94b89433baaecbc7cc0dd3e1a08dce4d4eb8d0fc442baabd4bbe99c0", "warmup_time": -1}, "time_solve_anaconda_53": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_anaconda_53(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS + [f\"--solver={solver}\", \"-c\", main, \"anaconda=5.3.0\"]\n    )", "min_run_count": 2, "name": "time_solve_anaconda_53", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5b8600e818025cd7cd6518748d577d02d4f727c5496a24ac158481afbbd64e61", "warmup_time": -1}, "time_solve_r_essentials_r_base_conda_forge": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_r_essentials_r_base_conda_forge(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS\n        + [\n            f\"--solver={solver}\",\n            \"-c\",\n            conda_forge,\n            \"-c\",\n            main,\n            \"-c\",\n            r,\n            \"r-essentials\",\n            \"r-base\",\n        ]\n    )", "min_run_count": 2, "name": "time_solve_r_essentials_r_base_conda_forge", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fcd8c26e72943f67b60d7dec8d356d3f842adfc9ffd9754bd59786c411884ec5", "warmup_time": -1}, "time_solve_r_essentials_r_base_defaults": {"code": "@pytest.mark.benchmark\n@paramaterize_solver\ndef test_solve_r_essentials_r_base_defaults(solver=SOLVER_DEFAULT):\n    execute_conda_cmd(CLEAN_INDEX_ARGS)\n    execute_conda_cmd(\n        SOLVE_ARGS\n        + [f\"--solver={solver}\", \"-c\", main, \"-c\", r, \"r-essentials\", \"r-base\"]\n    )", "min_run_count": 2, "name": "time_solve_r_essentials_r_base_defaults", "number": 0, "param_names": ["param1"], "params": [["'classic'", "'libmamba'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "52c926f78bde8798cdea3e9100d80378fc17b3a3f60e8dd96758e63b97abfcfe", "warmup_time": -1}}, "machines": {"Daniels-MBP.monotreme.club": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "Daniels-MBP.monotreme.club", "num_cpu": "10", "os": "Darwin 21.6.0", "ram": "17179869184", "version": 1}}, "tags": {"1.1.0": 170, "1.2.0": 204, "1.2.1": 208, "1.3.0": 416, "1.3.1": 418, "1.3.2": 427, "1.3.3": 437, "1.3.4": 465, "1.3.5": 482, "1.4.0": 609, "1.4.1": 640, "1.4.2": 643, "1.4.3": 645, "1.4.4": 647, "1.4.5": 650, "1.4.6": 652, "1.5.0": 677, "1.5.1": 708, "1.5.2": 717, "1.6.0": 995, "1.6.0rc1": 935, "1.6.0rc2": 955, "1.7.0": 1210, "1.7.0a1": 1160, "1.7.0a2": 1202, "1.7.1": 1222, "1.7.2": 1248, "1.8.0": 1517, "1.8.1": 1565, "1.8.2": 1597, "1.9.0": 1679, "1.9.1": 1682, "2.0.0": 1894, "2.0.1": 1910, "2.0.2": 1937, "2.0.3": 1950, "2.0.4": 1985, "2.1.0": 2015, "2.2.0": 2053, "2.2.1": 2069, "2.2.2": 2089, "2.2.3": 2105, "2.2.4": 2130, "2.2.5": 2144, "2.2.6": 2176, "2.2.7": 2185, "2.2.8": 2200, "2.3.0": 2324, "2.3.1": 2332, "22.11.0": 18658, "22.9.0": 17951, "3.0.0": 2421, "3.0.1": 2476, "3.0.2": 2480, "3.0.3": 2497, "3.0.4": 2518, "3.0.5": 2530, "3.0.6": 2537, "3.1.0": 2647, "3.1.1": 2654, "3.10.0": 3949, "3.10.1": 3985, "3.11.0": 4066, "3.12.0": 4139, "3.13.0": 4222, "3.14.0": 4262, "3.14.1": 4299, "3.15.0": 4387, "3.15.1": 4396, "3.16.0": 4473, "3.17.0": 4549, "3.18.0": 4639, "3.18.1": 4641, "3.18.2": 4678, "3.18.3": 4708, "3.18.4": 4778, "3.18.5": 4784, "3.18.6": 4809, "3.18.7": 4815, "3.18.8": 4818, "3.18.9": 4854, "3.19.0": 4872, "3.19.1": 4904, "3.19.2": 5089, "3.19.3": 5096, "3.2.0": 2664, "3.2.0a1": 2652, "3.2.1": 2682, "3.3.0": 2735, "3.3.1": 2751, "3.3.2": 2765, "3.4.0": 2826, "3.4.1": 2848, "3.4.2": 2920, "3.4.3": 2962, "3.5.0": 3006, "3.5.1": 3027, "3.5.2": 3031, "3.5.3": 3080, "3.5.4": 3084, "3.5.5": 3087, "3.6.0": 3290, "3.6.1": 3316, "3.6.2": 3336, "3.6.3": 3395, "3.6.4": 3405, "3.7.0": 3444, "3.7.1": 3472, "3.7.2": 3531, "3.7.3": 3560, "3.7.4": 3719, "3.8.0": 3771, "3.8.1": 3773, "3.8.2": 3787, "3.8.3": 3789, "3.8.4": 3806, "3.9.0": 3912, "3.9.1": 3933, "4.0.0": 5209, "4.0.1": 5222, "4.0.10": 6071, "4.0.11": 6236, "4.0.2": 5235, "4.0.3": 5282, "4.0.4": 5289, "4.0.5": 5317, "4.0.6": 5548, "4.0.7": 5654, "4.0.8": 5685, "4.0.9": 5836, "4.1.0": 5814, "4.1.1": 5852, "4.1.10": 6434, "4.1.11": 6491, "4.1.12": 6997, "4.1.2": 5890, "4.1.3": 5982, "4.1.4": 6050, "4.1.5": 6080, "4.1.6": 6141, "4.1.7": 6211, "4.1.8": 6281, "4.1.9": 6419, "4.10.0": 16589, "4.10.1": 16601, "4.10.2": 16643, "4.10.3": 16644, "4.11.0": 17165, "4.12.0": 17403, "4.13.0": 17579, "4.14.0": 17783, "4.2.0": 6549, "4.2.1": 6583, "4.2.10": 7325, "4.2.11": 7431, "4.2.12": 7536, "4.2.13": 7714, "4.2.14": 8305, "4.2.15": 8366, "4.2.16": 8511, "4.2.2": 6710, "4.2.3": 6753, "4.2.4": 6850, "4.2.5": 6999, "4.2.6": 7036, "4.2.7": 7076, "4.2.8": 7133, "4.2.9": 7149, "4.3.0": 8071, "4.3.1": 8140, "4.3.10": 8688, "4.3.11": 8699, "4.3.12": 8767, "4.3.13": 8880, "4.3.14": 9030, "4.3.15": 9083, "4.3.16": 9147, "4.3.17": 9473, "4.3.18": 9747, "4.3.19": 9874, "4.3.2": 8284, "4.3.20": 9955, "4.3.21": 9999, "4.3.22": 10192, "4.3.23": 10458, "4.3.24": 10479, "4.3.25": 10578, "4.3.26": 10651, "4.3.27": 10655, "4.3.28": 10705, "4.3.29": 10713, "4.3.3": 8367, "4.3.30": 10720, "4.3.31": 10898, "4.3.32": 11104, "4.3.33": 11170, "4.3.34": 11256, "4.3.4": 8427, "4.3.5": 8466, "4.3.6": 8489, "4.3.7": 8515, "4.3.8": 8527, "4.3.9": 8612, "4.4.0": 10945, "4.4.0alpha0": 9494, "4.4.0beta2": 10474, "4.4.0rc0": 10534, "4.4.1": 10953, "4.4.10": 11258, "4.4.11": 11363, "4.4.2": 10967, "4.4.3": 10986, "4.4.4": 11010, "4.4.5": 11042, "4.4.6": 11053, "4.4.7": 11090, "4.4.8": 11209, "4.4.9": 11240, "4.5.0": 11435, "4.5.0rc0": 11435, "4.5.1": 11544, "4.5.10": 13019, "4.5.11": 13053, "4.5.12": 13364, "4.5.13": 13459, "4.5.2": 11748, "4.5.3": 11804, "4.5.4": 11816, "4.5.5": 11961, "4.5.6": 12858, "4.5.7": 12890, "4.5.8": 12894, "4.5.9": 12937, "4.6.0": 13399, "4.6.0a1": 11662, "4.6.0a2": 11764, "4.6.0b0": 13156, "4.6.0b1": 13252, "4.6.0rc1": 13376, "4.6.1": 13418, "4.6.10": 14129, "4.6.11": 14137, "4.6.12": 14217, "4.6.13": 14270, "4.6.14": 14283, "4.6.2": 13464, "4.6.3": 13514, "4.6.4": 13549, "4.6.5": 13567, "4.6.6": 13572, "4.6.7": 13597, "4.6.8": 13662, "4.6.9": 14093, "4.7.0": 14502, "4.7.1": 14612, "4.7.10": 14984, "4.7.11": 15126, "4.7.12": 15342, "4.7.2": 14663, "4.7.3": 14688, "4.7.4": 14736, "4.7.5": 14756, "4.7.6": 14884, "4.7.7": 14908, "4.7.8": 14958, "4.7.9": 14969, "4.8.0": 15653, "4.8.0rc0": 15653, "4.8.1": 15867, "4.8.2": 15975, "4.8.3": 16034, "4.8.4": 16308, "4.8.5": 16392, "4.9.0": 16460, "4.9.1": 16481, "4.9.2": 16496}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}